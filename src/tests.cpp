#include "tests.h"


/*******************************************
 * STATE PREDICTOR TESTS
 *******************************************/

bool test_compute_augmented_sigma(){

  double SMALL_POSITIVE_VALUE = 1.e-05;
  VectorXd WEIGHTS = VectorXd(NSIGMA);
  WEIGHTS << w0, w, w, w, w, w, w, w, w, w, w, w, w, w, w;
  StatePredictor statePredictor(WEIGHTS);

  VectorXd x = VectorXd(NX);
  x << 5.7441,
       1.3800,
       2.2049,
       0.5015,
      0.3528;

  MatrixXd P = MatrixXd(NX, NX);
  P <<  0.0043,   -0.0013,    0.0030,   -0.0022,   -0.0020,
       -0.0013,    0.0077,    0.0011,    0.0071,    0.0060,
        0.0030,    0.0011,    0.0054,    0.0007,    0.0008,
       -0.0022,    0.0071,    0.0007,    0.0098,    0.0100,
       -0.0020,    0.0060,    0.0008,    0.0100,    0.0123;

  MatrixXd sigma_x = statePredictor.compute_augmented_sigma(x, P);

  MatrixXd expected_sigma_x = MatrixXd(NAUGMENTED, NSIGMA);

  expected_sigma_x <<
     5.7441,  5.85768,  5.7441,   5.7441,   5.7441,   5.7441,   5.7441,   5.7441,  5.63052,  5.7441,   5.7441,   5.7441,   5.7441,   5.7441,   5.7441,
     1.38,    1.34566,  1.52806,  1.38,     1.38,     1.38,     1.38,     1.38,    1.41434,  1.23194,  1.38,     1.38,     1.38,     1.38,     1.38,
     2.2049,  2.28414,  2.24557,  2.29582,  2.2049,   2.2049,   2.2049,   2.2049,  2.12566,  2.16423,  2.11398,  2.2049,   2.2049,   2.2049,   2.2049,
     0.5015,  0.44339,  0.631886, 0.516923, 0.595227, 0.5015,   0.5015,   0.5015,  0.55961,  0.371114, 0.486077, 0.407773, 0.5015,   0.5015,   0.5015,
     0.3528,  0.299973, 0.462123, 0.376339, 0.48417,  0.418721, 0.3528,   0.3528,  0.405627, 0.243477, 0.329261, 0.22143,  0.286879, 0.3528,   0.3528,
     0,       0,        0,        0,        0,        0,        0.34641,  0,       0,        0,        0,        0,        0,       -0.34641,  0,
     0,       0,        0,        0,        0,        0,        0,        0.34641, 0,        0,        0,        0,        0,        0,       -0.34641;

  bool r =  (expected_sigma_x - sigma_x).norm() < SMALL_POSITIVE_VALUE;
  return r;
}
